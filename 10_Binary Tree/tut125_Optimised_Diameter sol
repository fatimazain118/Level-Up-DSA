//Optimised solution for Diameter of the tree

#include<bits/stdc++.h>
using namespace std;

class node{
    public:
    int data;
    node* left;
    node* right;

    node(int d){    //constructor
        data = d;
        left = NULL;
        right = NULL;
    }
};

node* buildTree(){
    int d;   //value of the node
    cin>>d;

    if(d==-1){     //means node have no child node
        return NULL;
    }

    node* n = new node(d);
    n->left = buildTree();
    n->right = buildTree();

    return n;
}
void levelOrderPrint(node* root){   //level order traversal
    queue<node*> q;  //we have taken node* type coz in queue we'll need pointer to keep track of child nodes
    q.push(root);
    q.push(NULL);  //to get new line after 1st level

    while(!q.empty()){
        node* temp = q.front();
        if(temp==NULL){  //when you see NULL in queue output endl for new line and insert one more NULL
            cout<<endl;
            q.pop();    //also pop that NULL
            //insert new NULL for next level
            if(!q.empty()){
                q.push(NULL);
            }
        }
        else{
            q.pop();
            cout<<temp->data<<" ";

            if(temp->left){
                q.push(temp->left);
            }
            if(temp->right){
                q.push(temp->right);
            }
        }
    }
    return;
}


//Height of the tree
int height(node* root){
    if(root==NULL) return 0;

int h1 = height(root->left);
int h2 = height(root->right);
return 1+max(h1,h2);  //1+ coz root se left and right edge bhi include hai
}

//Diamter
int diameter(node* root){
    //base case
    if(root==NULL) return 0;

    //rec case
    int D1 = height(root->left) + height(root->right);  //when it passes though root
    int D2 = diameter(root->left);
    int D3 = diameter(root->right);

    return max(D1, max(D2,D3));  //as D2 and D3 are called recursively
}

//Optimised Solution
class Diameter_pair{   //here we'll pair of height and diameter at each node
    public:
    int height;
    int diameter;
};

Diameter_pair optDiameter(node*root){
    Diameter_pair p;

    if(root==NULL){
        p.height = p.diameter = 0;
        return p;  //output pair p
    }
  //otherwise
  Diameter_pair Left = optDiameter(root->left);
  Diameter_pair Right = optDiameter(root->right);

  p.height = max(Left.height, Right.height) + 1;

  int D1 = Left.height + Right.height;
  int D2 = Left.diameter;
  int D3 = Right.diameter;

  p.diameter = max(D1,max(D2,D3));
  return p;
}

int main(){
    freopen("tree_input.cpp", "r",stdin);
    node* root = buildTree();
    levelOrderPrint(root);
    cout<<"Diameter of tree is :"<<diameter(root)<<endl;
    cout<<"Optimised Diameter of tree is :"<<optDiameter(root).diameter<<endl;

    return 0;
}
//T.C - O(N)
