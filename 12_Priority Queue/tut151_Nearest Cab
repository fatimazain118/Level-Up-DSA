//finding Cabs
//finding the kth nearest cabs given their co-ordinates

#include <bits/stdc++.h>
using namespace std;

class Car
{
public:
    string id;
    int x, y;
    Car(string id, int x, int y)
    {
        this->id = id;
        this->x = x; //co-ordinates
        this->y = y;
    }
    int dist() const
    { //making dist function as const
        return x * x + y * y;
    }
};

class CarCompare
{
public:
    bool operator()(const Car A, const Car B)
    {                               //we have to give this overoading parameters in it
        return A.dist() < B.dist(); //in heap "<" less then sign is used for making MAX HEAP
    }
};

bool distCompare(Car A, Car B)
{
    return A.dist() < B.dist(); //ascending order
}

void printNearestCars(vector<Car> cars, int k)
{
    //creating max heap of size k
    priority_queue<Car, vector<Car>, CarCompare> max_heap(cars.begin(), cars.begin() + k); //heap is initialised with first k cars, used custom CarCompare class

    //now iterating on other (n-k) cars
    for (int i = k; i < cars.size(); i++)
    {
        auto car = cars[i]; //current car

        if (car.dist() < max_heap.top().dist())
        {                   //if current car is less then the heap top
            max_heap.pop(); //pop the root node
            max_heap.push(car);
        }
    }

    //printing all the cars which remains after the loop is over will be the kth smallest elements
    vector<Car> output;
    while (!max_heap.empty())
    {
        //cout<<max_heap.top().id<<endl;
        output.push_back(max_heap.top());
        max_heap.pop();
    }

    //vector of k nearest cars
    //sort(output.begin(), output.end(), distCompare);   //in place of sort to reduce the T.C we can just reverse the ans to get sorted output
    reverse(output.begin(), output.end());

    for (auto car : output)
    {
        cout << car.id << endl;
    }
    return;
}
int main()
{
    freopen("inputFile_Cab.txt", "r", stdin);
    int N, K;
    cin >> N >> K;

    string id;
    int x, y;

    vector<Car> cars; //storing all cars in vector

    for (int i = 0; i < N; i++)
    {
        cin >> id >> x >> y;
        Car car(id, x, y);
        cars.push_back(car);
    }

    printNearestCars(cars, K);
    return 0;
}
