// Tries is type of data structure can be used for pattern matching problem
// its an efficient data structure searching (also insertion) is made easy O(w) w is length is word but uses extra storage
// It's tree like data structure where we can have more then one childrens

// Prefix Tries Implementation

#include <bits/stdc++.h>
using namespace std;

// Build a Prefix Tree - Tries
class Node
{
public:
    char data;
    unordered_map<char, Node *> m; //this map given character with the node
    bool isTerminal;               // tells this node is terminal or not

    Node(char d)
    { // whenever we got new data except it and make new node
        data = d;
        isTerminal = false; // by default it will be empty map
    }
};

class Trie
{
public:
    Node *root; //pointer to the root node

    Trie()
    {
        root = new Node('\0'); // filling null in root node
    }

    void insert(string word)
    {
        Node *temp = root; // creating temp pointer to iterate on the words

        for (char ch : word)
        {
            if (temp->m.count(ch) == 0)
            {                           // it check in hash map wheather key is present or not
                Node *n = new Node(ch); //if that character is not present in hash map create new node for that where n pointer is pointing
                temp->m[ch] = n;        // make connection to previous node (storing the character in new node)
            }
            temp = temp->m[ch]; // moving temp to next node
        }
        temp->isTerminal = true; // when it's end of the word
    }

    bool search(string word)
    {
        Node *temp = root; // starting from root

        for (char ch : word)
        {
            if (temp->m.count(ch) == 0)
            {
                return false; // means character not present
            }
            temp = temp->m[ch];
        }
        return temp->isTerminal; // if temp is a terminal node then only return
    }
};

int main()
{

    string word[] = {"apple", "ape", "no", "news", "not", "never"};

    Trie t;
    for (auto w : word)
    {
        t.insert(w);
    }

    int q;        // No. of queries
    cin >> q;

    string search_word;

    while (q--)
    {
        cin >> search_word;
        if (t.search(search_word))
        {
            cout << "Yes" << endl;
        }
        else
        {
            cout << "No" << endl;
        }
    }
    return 0;
}
____________________________________________
Output : 

4
apple
Yes
india
No
zainab
No
ape
Yes
