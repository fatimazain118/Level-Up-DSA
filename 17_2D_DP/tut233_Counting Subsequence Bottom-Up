// Counting Subsequence
// Bottom-Up

#include<bits/stdc++.h>
using namespace std;

int countSub(string a, string b, int m, int n, vector<vector<int>> &dp){

    //base
    for(int i=0; i<=m; i++){
        dp[i][0] = 1;
    }
    for(int i=1;i<=m;i++){         //dp idexing is 1 based
         for(int j=1; j<=n; j++){

             if(a[i-1]==b[j-1]){            //matching
                 dp[i][j] = dp[i-1][j-1] + dp[i-1][j];
             }
             else{
                 dp[i][j] = dp[i-1][j];      //no matching
             }
             cout<<dp[i][j]<<" ";         //printing dp
         }
         cout<<endl;
    }
    return dp[m][n]; 
}
int main(){
    string a = "ABBCECDGCC";        //1*2*3 (1 way for A, 2 ways for B and 3 ways for C)
    string b = "ABC";
    
    int m=a.size();
    int n=b.size();

    vector<vector<int>> dp(m+1, vector<int>(n+1,0));

    cout<<countSub(a,b,m,n,dp)<<endl;
    return 0;
}
_________________________
Output:
1 2 0
1 2 2
1 2 2
1 2 4
1 2 4
1 2 4
1 2 6
1 2 8
8
