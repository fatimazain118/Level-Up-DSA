// knapsack problem
// Bottom-Up

#include<bits/stdc++.h>
using namespace std;

int knapsack(int wts[], int prices[], int N, int W){

    vector<vector<int>> dp(N+1, vector<int> (W+1,0));       //N+1 coz indexing starts from 0

    for(int i=1;i<=N; i++){
        for(int j=1;j<=W;j++){
            int inc = 0, exc =0;

            if(wts[i-1]<=j){
                inc = prices[i-1] + dp[i-1][j-wts[i-1]];      //making call to dp[n-1] items 
            }
             exc = dp[i-1][j];
                dp[i][j] = max(inc, exc);
        }
    }
    return dp[N][W];
}

int main(){
    int wts[] = {2,7,3,4};
    int prices[] = {5,20,20,50};

    int N = 4;
    int W = 11;

    cout<<knapsack(wts,prices,N,W)<<endl;
    return 0;
}
_______________________
Output:
75
