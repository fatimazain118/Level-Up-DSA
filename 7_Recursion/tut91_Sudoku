//Sudoku Code

#include<bits/stdc++.h>
using namespace std;

bool isSafe(int mat[][9], int i, int j, int no){

    //checking for the rows and col
    for(int k=0; k<9; k++){
        if(mat[k][j] == no || mat[i][k] ==no){
            return false;
        }
    }

    //checking for sub-grid
     
     int sx = (i/3)*3;   //this will the staring co-ordinates of sub-grid
     int sy = (j/3)*3;

     for(int x=sx; x<sx+3; x++){
         for(int y=sy; y<sy; y++){
             if(mat[x][y]==no){
                 return false;
             }
         }
     }
     return true;
}

bool solveSudoku(int mat[][9], int i, int j, int n){

    //base case
    if(i==n){
        //print solution
       for(int k=0; k<n; k++){
           for(int m=0; m<n; m++){
               cout<<mat[k][m]<<" ";
           }
           cout<<endl;
       }
        return true;
    }

    //recursive case
    if(j==n){
        return solveSudoku(mat,i+1,0,n);  //after completion of one row to move to next row i+1 for which col will be 0
    }

    //skip the pre-filled cells
    if(mat[i][j]!=0){
        return solveSudoku(mat,i,j+1,n);
    }

    //To fill cell we need to try all possiblities starting from 1 to n
    for(int number=1; number<=n; number++){
        //whether it's save to place the number or not at that cell
        if(isSafe(mat,i,j,number)){

            mat[i][j] = number;
            bool solveSubproblem = solveSudoku(mat,i,j+1,n);
            if(solveSubproblem==true){
                return true;
            }
        }
    }
    //backtracking if none of the no. suits at that particular cell
    mat[i][j] = 0;
    return false; //return false signal to previous cells 
}
int main(){
    int n =9;
    int mat[9][9]=
    {{5,3,0,0,7,0,0,0,0},
     {6,0,0,1,9,5,0,0,0},
     {0,9,8,0,0,0,0,6,0},
     {8,0,0,0,6,0,0,0,3},
     {4,0,0,8,0,3,0,0,1},
     {7,0,0,0,2,0,0,0,6},
     {0,6,0,0,0,0,2,8,0},
     {0,0,0,4,1,9,0,0,5},
     {0,0,0,0,8,0,0,7,9}};

     if(!solveSudoku(mat,0,0,n)){
         cout<<"No solution exist!";
     }
}
