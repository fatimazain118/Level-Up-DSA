// Min jump In Array
// Top Down dp approach

#include <bits/stdc++.h>
using namespace std;

int min_jumps(vector<int> arr, int n, vector<int> dp, int i)
{
    if (i == n - 1)
    { //reached the last index
        return 0;
    }
    if (i >= n)           //when out of array
    {
        return INT_MAX;
    }
    //rec case
    if (dp[i] != 0)
    {
        return dp[i];             //when in dp already computed return that value
    }

    //assume
    int steps = INT_MAX;           //let the steps needed to go end of array is INT_MAX
    int max_jump = arr[i];         // max jump that can be taken is arr[i]

    for (int jump = 1; jump <= max_jump; jump++)           //trying all possible jumps
    {
        int next_cell = i + jump;
        int subprob = min_jumps(arr, n, dp, next_cell);
        if (subprob != INT_MAX)
        {
            steps = min(steps, subprob + 1);
        }
    }
    return dp[i] = steps;                // after exploring all jumps update dp array
}

int main()
{
    vector<int> arr{3, 4, 2, 1, 2, 3, 7, 1, 1, 3}; //each element in the array represents max jump it can take
    int n = arr.size();

    //create a array for dp
    vector<int> dp(n, 0);

    cout << min_jumps(arr, n, dp, 0) << endl;

    return 0;
}
_____________________________________
Output :
4
