// Box Stacking
// return max height after stacking box
// height width depth should be smallest than below box

#include <bits/stdc++.h>
using namespace std;

// Custom Compare Function
bool CompareBoxes(vector<int> b1, vector<int> b2){
       return b1[2] > b2[2];                         //2 is because 2th entry represent height(also operator should be same in both function)
}

bool canPlace(vector<int> b1, vector<int> b2){
    if(b1[0] > b2[0] and b1[1] > b2[1] and b1[2] > b2[2]){        //comparison on width depth height
        return true;                                         //comparison of height too coz from sorting same height could came here strictly smaller should be places above
    }
    return false;
}

int boxStacking(vector<vector<int>> boxes){

    //Sort
    sort(boxes.begin(), boxes.end(), CompareBoxes);

    //DP
    int n = boxes.size();
    int max_height = 0;
    vector<int> dp(n+1,0);

    for(int i=0; i<n; i++){
        dp[i] = boxes[i][2];         //store default height of the ith box in dp array
    }

    for(int i=0; i<n; i++){
        //check for all indexes who's height is less than ith box
        for(int j=0; j<i; j++){
            if(canPlace(boxes[j], boxes[i])){
                int current_height = boxes[i][2];

                if(dp[j] + current_height > dp[i]){         //means height of dp[j](previous height) plus current 
                    dp[i] = dp[j] + current_height;          //update in dp
                    max_height = max(max_height,dp[i]);
                    cout<<dp[i]<<",";             //printing dp array
                }
            }
        }
    }
    return max_height;
}
int main()
{
    vector<vector<int>> boxes = {
        {2, 1, 2},
        {3, 2, 3},
        {2, 2, 8},
        {2, 3, 4},
        {2, 2, 1},
        {4, 4, 5},
    };

    int height = boxStacking(boxes);
    cout<<"\nMax Height : "<<height<<endl;
    return 0;
}
_____________________________________________
Output:
9,8,7,10,6,
Max Height : 10
