//Reverse linked list using recursive approach

#include<bits/stdc++.h>
using namespace std;
class node{
    public:
     int data;
     node *next;
      
      node(int data){
        this->data = data;
        next = NULL;
      }
};

node* reverseLL(node * head)  //as we need to return the head of the LL
{
    //base case
    if(head==NULL or head->next==NULL){
        return head;
    }

    //recursive case
    node* sHead = reverseLL(head->next); //first element ko chr kr pure pr recursive call
    head->next->next = head;
    head->next = NULL;
    return sHead;
}

void insertAtHead(node *&head, int data){
    if(head == NULL){
        head = new node(data);
        return;
    }

    node *n = new node(data);
    n->next = head;
    head = n;
}

void printLL(node *head){
    while(head!=NULL){
        cout<<head->data<<"->";
        head = head->next;
    }
    cout<<endl;
}
int main(){
    node *head = NULL;

    insertAtHead(head,4);
    insertAtHead(head,5);
    insertAtHead(head,7);
    insertAtHead(head,8);
    insertAtHead(head,9);

    printLL(head);

    head = reverseLL(head);
    printLL(head);

    return 0;
}
