//MergeSort in LL

#include<bits/stdc++.h>
using namespace std;
class node{
    public:
     int data;
     node *next;
      
      node(int data){
        this->data = data;
        next = NULL;
      }
};

node* midPoint(node* head){

    node *slow = head;
    node *fast = head->next;

    while(fast!=NULL and fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;  //taking two steps at a time
    }
    return slow;
}

node* merge(node *a, node *b){  //head of the two sorted linked List
       
       //base case
       if(a==NULL) return b;
       if(b==NULL) return a;  //if one of the LL is NULL output another

       //rec case
       node* c;

       if(a->data < b->data){
           c = a;
           c->next = merge(a->next,b);
       }
       else{
           c = b;
           c->next = merge(a,b->next);
       }
       return c;  //head pointer
}   


node* mergeSort(node* head){
    //base case
    if(head==NULL or head->next==NULL){
        return head;
    }
    //rec case
    node* mid = midPoint(head);

    //break at mid
    node* a= head;
    node* b = mid->next;
    mid->next = NULL;  //breaking the link

    //Rescurcively sort
    a= mergeSort(a);
    b= mergeSort(b);

    //Merge
    return merge(a,b);  //after sorting L1 and L2 merge them
}

void insertAtHead(node *&head, int data){
    if(head == NULL){
        head = new node(data);
        return;
    }

    node *n = new node(data);
    n->next = head;
    head = n;
}

void printLL(node *head){
    while(head!=NULL){
        cout<<head->data<<"->";
        head = head->next;
    }
    cout<<endl;
}
int main(){
    node *head = NULL;

    insertAtHead(head,4);
    insertAtHead(head,5);
    insertAtHead(head,7);
    insertAtHead(head,8);
    insertAtHead(head,9);

    printLL(head);

    head = mergeSort(head);
    printLL(head);

    return 0;
}
