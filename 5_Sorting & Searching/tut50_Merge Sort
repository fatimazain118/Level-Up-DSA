//Merge Sort

#include<iostream>
#include<vector>
using namespace std;

//helper method
void merge(vector<int> &array, int s, int e){    //pass by reference so that changes get reflected in array
       int i = s;
       int mid = (s+e)/2;
       int j = mid+1;

       vector<int> temp;   //making temp vector to store sorted array

       while(i<=mid and j<=e){
           if(array[i] < array[j]){
               temp.push_back(array[i]);
               i++;
           }
           else{
               temp.push_back(array[j]);
               j++;
           }
       }

       //coping remaining element from first array if second is finished
       while(i<=mid){
           temp.push_back(array[i++]);
       }

       //coping remaining element from second array if first is finished
       while(j<=e){
           temp.push_back(array[j++]);
       }

       //Coping back the element of temp array to original array
       int k = 0;
       for(int idx = s; idx <=e; idx++){
           array[idx] = temp[k++];
       }
       return;
}

//sorting
void mergesort(vector<int> &array, int s, int e){

    //base case
    if(s>=e){  //only one element in array
        return;
    }

    //recursive case
    int mid = (s+e)/2;
    mergesort(array,s,mid);
    mergesort(array, mid+1,e);
    return merge(array,s,e);      //to merge the two sorted array
}

int main(){

    vector<int> arr{10,5,2,0,7,6,4};

    int s = 0; //start
    int e = arr.size() -1; //end
    mergesort(arr, s, e);
        for(int x : arr){
            cout<< x <<",";
        }
    }
