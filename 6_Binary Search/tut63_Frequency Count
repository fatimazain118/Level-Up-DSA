#include<bits/stdc++.h>
using namespace std;

int lower_bound(vector<int> arr, int key){
    int s = 0;
    int e = arr.size() - 1;
    int ans = -1;

    while(s<=e){
        int mid = (s+e)/2;

        if(arr[mid] == key){
            ans = mid;   //modified Binary search every time we will update our answers
            e = mid - 1;
        }
        else if(arr[mid] > key){
            e = mid - 1;
        }
        else{
            s = mid + 1;
        }

    }
    return ans;
}
int upper_bound(vector<int> arr, int key){
    int s = 0;
    int e = arr.size() - 1;
    int ans = -1;

    while(s<=e){
        int mid = (s+e)/2;

        if(arr[mid] == key){
            ans = mid;   // update our answers
            s = mid + 1;
        }
        else if(arr[mid] > key){
            e = mid - 1;
        }
        else{
            s = mid + 1;
        }

    }
    return ans;
}

int main(){
    vector<int> arr = {0,1,1,2,3,3,3,3,3,4,5,5,5,10};
    int n = arr.size();
    
    int value;
    cout<<"Enter your value"<<endl;
    cin>>value;
    cout<<upper_bound(arr,value) - lower_bound(arr,value) + 1 <<endl;

    //STL
    cout<<upper_bound(arr.begin(),arr.end(),value) - lower_bound(arr.begin(),arr.end(),value)<<endl;   //these will return an iterator
    
    return 0;
}

//We can use linear search to find the no. of times no. occur but thats not the optimal way this can be done by binary search in O(logn) time
