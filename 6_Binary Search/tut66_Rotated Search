//Rotated Search
//we have to output the index of element which have been rotated and inserted in beginning of the array

#include<bits/stdc++.h>
using namespace std;

int rotated_search(vector<int> a, int key){
    int n = a.size();

    //Logic
    int s = 0;
    int e = n - 1;

    while(s<=e){
        int mid = (s+e)/2;

        if(a[mid] == key){
            return mid;
        }

        //case 1 
        if(a[s] <= a[mid]){
            //left, mid lies in line 1
            if(key >= a[s] and key <= a[mid]){
                //search in mid's left
                e = mid - 1;
            }
            else{
                //search in right of mid in Line 1
                s = mid + 1;
            }
        }

        //case 2 
        else{
            //right means mid lies in line 2
            if(key >= a[mid] and key <= a[e]){
                //search in right part of mid in L2
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }

        }
    }
    return -1;
}

int main(){
   vector<int> a{4,5,6,7,0,1,2,3};
   int key;
   cin>>key;
   cout<<rotated_search(a,key)<<endl;
   return 0;
}
