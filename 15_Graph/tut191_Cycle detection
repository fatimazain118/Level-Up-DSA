// Cycle Detection
// Graph that doesn't contain a cycle are also known as Tree
// For cycle we have a way to visit that node more then once and that node should not be a parent of current node

#include <bits/stdc++.h>
using namespace std;

class Graph
{
    list<int> *l;
    int V;

public:
    Graph(int V)
    {
        this->V = V;
        l = new list<int>[V];
    }

    //undirected graph
    void addEdge(int x, int y)
    {
        l[x].push_back(y);
        l[y].push_back(x);
    }

    bool dfs(int node, vector<bool> &visited, int parent)
    {
        //mark that node visited

        visited[node] = true;

        for (auto nbr : l[node])
        {
            if (!visited[nbr])
            {
                bool nbrFoundCYCLE = dfs(nbr, visited, node);
                if (nbrFoundCYCLE)
                {
                    return true;
                }
                else if (nbr != parent)
                {
                    return true;
                }
            }
        }
        return false;
    }

    bool contain_cycle()
    {
        //Graph is single component

        vector<bool> visited(V, false); //starting me false
        return dfs(0, visited, -1);
    }
};

bool contain_cycle(int V, vector<pair<int, int>> edges)
{ //this we have done to run in online judge

    Graph g(V);
    for (auto edge : edges)
    {
        g.addEdge(edge.first, edge.second);
    }
    return g.contain_cycle();
}

int main()
{
    Graph g(3);

    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 0);

    cout << g.contain_cycle() << endl;
    return 0;
}
________________________________________
Output :
1
