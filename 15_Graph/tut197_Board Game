#include <bits/stdc++.h>
#define M 3
#define N 4
using namespace std;

//1. Make Trie class
class Node
{
public:
    char s;
    unordered_map<char, Node *> children;
    string word;
    bool isTerminal;

    Node(char s)
    {
        this->s = s;
        isTerminal = false;
        word = "";
    }
};

class Trie
{
public:
    Node *root;
    Trie()
    {
        root = new Node('\0');
    }

    void addWord(string word)
    {
        Node *temp = root; //this temp pointer will iterate over the word
        for (auto ch : word)
        {
            if (temp->children.count(ch) == 0)
            { //if trie don't have that child fill it
                temp->children[ch] = new Node(ch);
            }
            temp = temp->children[ch];
        }
        //last node
        temp->isTerminal = true;
        temp->word = word; //store that word
    }
};

//main algo (8-way dfs + trie guided search)
//as from one node we have 8 neighbours to which we can go
void dfs(char board[M][N], Node *node, int i, int j, bool visited[][N], unordered_set<string> &output)
{
    //base case
    char ch = board[i][j]; //character is at i,j position
    if (node->children.count(ch) == 0)
    { //if not found return
        return;
    }

    //otherwise trie contains this node
    visited[i][j] = true;
    node = node->children[ch];

    //if it's a terminal node in the trie
    if (node->isTerminal)
    {
        output.insert(node->word);
    }

    //explore the neighbour
    int dx[] = {0, 1, 1, 1, 0, -1, -1, -1}; //these are the 8-direction where for neighbours we can make call
    int dy[] = {-1, -1, 0, 1, 1, 1, 0, -1};

    for (int k = 0; k < 8; k++)
    {
        int ni = i + dx[k];
        int nj = j + dy[k];

        //if it's in bounds and is not visited
        if (ni >= 0 and nj >= 0 and ni < M and nj < N and !visited[ni][nj])
        {
            dfs(board, node, ni, nj, visited, output);
        }
    }
    //last step backtracking
    visited[i][j] = false;
    return;
}

int main()
{
    string words[] = {"SNAKE", "FOR", "QUEZ", "SNACKS", "GO", "TUNES", "CAT", "SNACK"};

    char board[M][N] = {{'S', 'E', 'R', 'T'},
                        {'U', 'N', 'K', 'S'},
                        {'T', 'C', 'A', 'T'}};

    //1. Trie
    Trie t;
    for (auto w : words)
    {
        t.addWord(w);
    }

    //2. Take a container to store words that are found in dfs search
    unordered_set<string> output; //to avoid duplicated we use set

    //3. Step (8-DFS Search from every cell)
    bool visited[M][N] = {0};

    for (int i = 0; i < M; i++)
    {
        for (int j = 0; j < N; j++)
        {
            dfs(board, t.root, i, j, visited, output);
            //mark visited array after every call by backtracking we can do this
        }
    }

    //print output

    for (auto word : output)
    {
        cout << word << endl;
    }
    return 0;
}
_____________________________________
Output :
CAT
SNACK
SNACKS
SNAKE
TUNES
