// adjacency List 
// made by array of pointers means index pointing to the lists

#include<bits/stdc++.h>
using namespace std;

class Graph{
    list<int> *l;
    int V;   //for vertex

    public:
     Graph(int v){
         V = v;
         l = new list<int>[V];  //V no. of linked list of intergers
     }

     void addEdge(int i, int j, bool undir = true){          // when graph is undirected and i ang j are nodes
         l[i].push_back(j);                           // insert the jth node in l[i]
         if(undir){
             l[j].push_back(i);                     //also insert the node in i in l[j] means 1 is neighbour of 2 and 2 is also neighbour of 1
         }
     }

     void printAdjList(){
         //Iterate over all the rows

         for(int i=0; i<V; i++){
             cout<<i<<"-->";
             //every element of the ith linked list

             for(auto node : l[i]){
                 cout<<node<<",";
             }
             cout<<endl;
         }
     }
};

int main(){
    Graph g(6);
    g.addEdge(0,1);
    g.addEdge(0,4);
    g.addEdge(2,1);
    g.addEdge(3,4);
    g.addEdge(4,5);
    g.addEdge(2,3);
    g.addEdge(3,5);

    g.printAdjList();

    return 0;
}
_______________________________________________________
Output :
0-->1,4,
1-->0,2,
2-->1,3,
3-->4,2,5,
4-->0,3,5,
5-->4,3,
