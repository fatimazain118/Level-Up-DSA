// DFS

#include<bits/stdc++.h>
using namespace std;

class Graph{
    list<int> *l;
    int V;   //for vertex

    public:
     Graph(int v){
         V = v;
         l = new list<int>[V];  //V no. of linked list of intergers
     }

     void addEdge(int i, int j, bool undir = true){          // when graph is undirected and i ang j are nodes
         l[i].push_back(j);                           // insert the jth node in l[i]
         if(undir){
             l[j].push_back(i);                     //also insert the node in i in l[j] means 1 is neighbour of 2 and 2 is also neighbour of 1
         }
     }

void dfsHelper(int node, bool *visited){
    visited[node] = true;
    cout<<node<<" ";

    //make a dfs call on all its unvisited neighbours
    for(int nbr : l[node]){
        if(!visited[nbr]){
            dfsHelper(nbr,visited);  //recursive call
        }
    }
    return;
}
     void dfs(int source){
         bool *visited = new bool[V]{0};
         dfsHelper(source, visited);
     }
};

int main(){
    Graph g(6);
    g.addEdge(0,1);
    g.addEdge(0,4);
    g.addEdge(2,1);
    g.addEdge(3,4);
    g.addEdge(4,5);
    g.addEdge(2,3);
    g.addEdge(3,5);

    g.dfs(1);

    return 0;
}
