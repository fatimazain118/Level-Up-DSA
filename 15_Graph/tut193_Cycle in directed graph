// Cyle in directed graph

#include <bits/stdc++.h>
using namespace std;

class Graph
{
    list<int> *l;
    int V;

public:
    Graph(int V)
    {
        this->V = V;
        l = new list<int>[V];
    }

    void addEdge(int x, int y)
    {
        l[x].push_back(y); // directed graph from x to y
    }

    bool dfs(int node, vector<bool> &visited, vector<bool> &stack)
    {
        //arrive at node
        visited[node] = true;
        stack[node] = true;

        //do some work return true if backedge is found, else false

        for (int nbr : l[node])
        {
            if (stack[nbr] == true)       //check in stack if neighbour already present
            {                //means that node is in stack
                return true; // means back edge found
            }
            else if (visited[nbr] == false)
            {
                bool nbrFoundCycle = dfs(nbr, visited, stack);
                if (nbrFoundCycle)
                {
                    return true;
                }
            }
        }
        //going back
        stack[node] = false;
        return false;
    }

    bool contains_cycle(int V, vector<pair<int, int>> edges)
    {
        //doing this as our function was given is that way

        Graph g(V);
        for (auto edge : edges)
        {
            g.addEdge(edge.first, edge.second);
        }
        return g.contains_cycle();
    }

    bool contains_cycle()
    {
        vector<bool> visited(V, false);
        vector<bool> stack(V, false);

        for (int i = 0; i < V; i++)
        {
            int source = i;
            if (!visited[source])
            {
                if (dfs(source, visited, stack))
                {
                    return true;
                }
            }
        }
    }
};

int main()
{
    Graph g(3);
    g.addEdge(0, 1);
    g.addEdge(1, 2);
    g.addEdge(2, 0);

    cout << g.contains_cycle() << endl;
    return 0;
}
__________________________________________________
Output :
1
