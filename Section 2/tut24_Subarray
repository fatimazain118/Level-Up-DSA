#include<iostream>
#include<vector>
#include<algorithm>
#include<climits>
using namespace std;

bool outOfOrder(vector<int> arr, int i)
{
    int x= arr[i];
    //check for 1st elemnt
    if(i==0)
    {
        return x > arr[1]; //when 1st element of array is greater then second
    }
    //check for last element
    if(i==arr.size()-1)
    {
        return x<arr[i-1];   //as 11 will be checked with 10 only in array
    }
    //In middle if peak is found
    return x > arr[i+1] or x < arr[i-1];
}

pair<int, int> SubarraySort(vector<int> arr)
{
    int smallest = INT_MAX;
    int largest  INT_MIN;
    
    //iterating though array to find smallest and largest
    for(int i=0; i<arr.size(); i++)
    {
        int x = arr[i];

        if(outOfOrder(arr,i))
        {
            smallest = min(smallest,x);
            largest = max(largest, x);
        }
    }
    
    //already sorted array
    if(smallest == INT_MAX)  return {-1,-1};

//scanning from left to get correct position of smallest element
int left =0;
while(smallest >= arr[left])
{
    left++;
}

//scanning to find correct position for largest element in array
int right = arr.size() - 1;
while(largest <= arr[right])
{
    right--;
}

return {left, right};
}

int main()
{
     vector<int> arr{1,2,3,4,5,8,6,7,9,10,11};
    auto p = SubarraySort(arr);
    cout<<p.first<<" and "<<p.second<<endl;
    return 0;
}
T.C - O(N)
